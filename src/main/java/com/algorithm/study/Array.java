package com.algorithm.study;

/**
 * 数组是一种线性表数据结构，它用一组连续的内存空间，来存储一组具有相同类型的数据
 */
public class Array {
    //线性表 linear list
    //线性表定义：具有相同数据类型的n个数据元素的有限序列。其中n为表长度.表示为 L=（a1,a2,a3,...,a(i),a(i+1),...,a(n)）

    //数组是一种线性表数据结构，它用一组连续的内存空间，来存储一组具有相同类型的数据

    //数组的特点： 1. 随机访问 2. 插入、删除数据效率低

    //数组是如何根据下标随机访问数据元素的呢？ 通过寻址公式 a[i]_address = base_address + i * data_type_sie

    //数组和链表的区别：链表适合插入、删除，时间复杂度是 O(1)；数组适合查找，查找的时间复杂度是O(n),根据下标随机访问的时间复杂度为O(1)

    //(1+2+3...+n)/n = (1+n)*n/2n = O(n) 插入操作的时间复杂度， 在特定的场景下，也可以降为O（1）

    //删除操作的最好情况时间复杂度是O（1），最坏情况的时间复杂度是O（n）, 平均情况的时间复杂度是O（n）,在特定情况下，删除操作
    //只是标记需要删除的元素，在内存空间不足的时候，再统一做删除处理，这也是JVM标记清除垃圾回收算法的核心思想

    //容器类ArrayList 与 Array 优缺点？
    //ArrayList 可以将很多数组操作的细节封装起来，且支持动态扩展；每次存储空间不足时，空间自动扩容为1.5倍大小；因为扩容操作耗时，所以
    //使用ArrayList可以指定数据大小

    /**
     * 1. 数组的定义？
     * 数组是一种线性表结构，它用一组连续的内存空间，存储一组具有相同类型的数据
     * 2. 线性表的定义？
     * 具有相同数据类型的N个元素的有限序列。其中n为表长度。线性表表示方法 L=(a1,a2,a3,...,a(i),a(i+1),...a*(n))
     * 3. 数组和线性表的区别？
     * 数组支持随机访问，根据小标随机访问数据的时间复杂度是O（1），插入、删除数据的效率较低;
     * 链表适合数据的插入、删除，时间复杂度是O（1）
     * 4. 数组和容器类的区别，使用场景是怎样的？
     * ArrayList 可以将很多操作数组的方法封装起来，支持动态扩容; 但动态扩容的效率较低
     * 一般开发中，使用ArrayList 就可以了，省时省力。但是一些对性能要求极高的开发，最好选择数组
     * 5. 为什么大多数编程语言中，数组要从0开始编号，而不是从1
     * 寻址公式 a[k]_address = base_address + k * type_size;
     * 下标从1开始的寻址公式 a[k]_address = base_address + (k-1) * type_size;
     * 多了一次减法运算，因此为了提高性能，从0开始
     * 6. JVM 的标记清除垃圾回收算法原理
     * 每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。
     */

}
